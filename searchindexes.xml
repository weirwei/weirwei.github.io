<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Gemini 实战</title><url>/practical/get_start_gemini/</url><categories><category>实战问题</category></categories><tags><tag>人工智能</tag><tag>谷歌</tag><tag>Gemini</tag></tags><content type="html"><![CDATA[   谷歌的 Gemini 已对外开放，虽然完全比不上他宣传的那么叼，但不妨碍我们尝试把玩。 本文的目的是能够在本地调通 Gemini 的 api 接口
效果先看一下效果
获取 api keyhttps://ai.google.dev反向代理https://vercel.com/用国内手机号就能注册
https://github.com/antergone/palm-proxy直接点击 Deploy 按钮，完成后续操作就行了
Hello Gemini跑的时候，直接使用官方的库不太好使，自己照着复制粘贴了一套。
import ( &#34;fmt&#34; &#34;testing&#34; jsoniter &#34;github.com/json-iterator/go&#34; &#34;github.com/stretchr/testify/assert&#34; &#34;github.com/weirwei/ikit/ihttp&#34; &#34;github.com/weirwei/ikit/iutil&#34; ) type AutoGenerated struct { Candidates []Candidates `json:&#34;candidates&#34;` PromptFeedback PromptFeedback `json:&#34;promptFeedback&#34;` } type SafetyRatings struct { Category string `json:&#34;category&#34;` Probability string `json:&#34;probability&#34;` } type Candidates struct { Content Content `json:&#34;content&#34;` FinishReason string `json:&#34;finishReason&#34;` Index int `json:&#34;index&#34;` SafetyRatings []SafetyRatings `json:&#34;safetyRatings&#34;` } type PromptFeedback struct { SafetyRatings []SafetyRatings `json:&#34;safetyRatings&#34;` } // ///// type GenerateContentRequest struct { Model string `json:&#34;model,omitempty&#34;` Contents []*Content `json:&#34;contents,omitempty&#34;` } type Content struct { Parts []*Part `json:&#34;parts,omitempty&#34;` Role string `json:&#34;role,omitempty&#34;` } type Part struct { Text string `json:&#34;text&#34;` } const apiKey = &#34;xxxxxxxx&#34; // 这里写你自己申请的 api key func Gemini(req GenerateContentRequest) (*AutoGenerated, error) { _url := &#34;https://palm-proxy-blush-two.vercel.app/v1/models/gemini-pro:generateContent&#34; requestBody := make(map[string]interface{}) var result AutoGenerated err := iutil.StructMap(&amp;req, requestBody) if err != nil { return nil, err } resp, err := ihttp.POST(&amp;ihttp.Options{ URL: fmt.Sprintf(&#34;%s?key=%s&#34;, _url, apiKey), RequestBody: requestBody, Encode: ihttp.EncodeJson, Retry: 0, Timeout: 300000, }) if err != nil { return nil, err } err = jsoniter.UnmarshalFromString(resp.ResponseBody, &amp;result) if err != nil { return nil, err } return &amp;result, nil } func TestGemini(t *testing.T) { req := GenerateContentRequest{ Contents: []*Content{ { Parts: []*Part{ { Text: &#34;你好！文心一言&#34;, }, }, Role: &#34;user&#34;, }, }, } res, err := Gemini(req) assert.Nil(t, err) t.Log(iutil.ToJson(res)) } 这样算是跑通了，后续就直接对着官方文档研究吧
  ]]></content></entry><entry><title>换机记录</title><url>/practical/change_machine/</url><categories><category>实战问题</category></categories><tags><tag>macOS</tag></tags><content type="html"><![CDATA[   要换主力机，记录一下换机过程。因为想对自己的电脑掌控度高一点，因此选择重新配置，没有使用苹果的数据导入功能。
安装浏览器直接从 safari 下载安装 edge
edge 有个 drop 插件，换机的时候发数据挺好用 下载钉钉、微信专心配置的时候可不能漏了消息
命令行配置后续有很多操作需要用到命令行，先简单配置一下
iterm2安装iterm2 https://iterm2.com/zshsh -c &#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&#34; 网络问题可能执行不动，先通过cdn下载下来，再执行
浏览器输入 https://cdn.jsdelivr.net/gh/ohmyzsh/ohmyzsh/tools/install.sh执行 sh install.sh 常用插件一个高亮提示，一个命令建议，非常实用
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions vim ~/.zshrc
plugins=( git zsh-syntax-highlighting zsh-autosuggestions ) source ~/.zshrc
安装brew网上找到个比较快的方案
/bin/bash -c &#34;$(curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh)&#34; Maccy 实现剪切板自由https://maccy.app/强推的小工具，可以快速获取剪切板历史记录，还是不强制收费的。
ClashX略
开发环境配置Git 配置主要配置 ssh 和 username, email
ssh-keygen 生成公钥，配置到 github 和公司的git平台上
# 当前仓库配置 git config user.name xxx git config user.email xxxx@xxx # 全局配置 git config user.name xxx git config user.email xxxx@xxx 主要是区分自己 github 仓库和公司代码仓库的提交配置，可以写个脚本
可能根据工作环境，还需要配置一下 insteadOf
安装 golanghttps://go.dev/dl/环境配置
# golang config export GOPATH=/Users/weirwei/Language/go export GOROOT=/usr/local/go export PATH=$PATH:$GOROOT/bin:$GOPATH/bin # export GOPRIVATE=xxx.xxx 配置公司的git平台 # export GONOPROXY=xxx.xxx 配置公司的git平台 export GOPROXY=https://goproxy.cn,https://goproxy.io,direct export GO111MODULE=on 安装goimports
go install golang.org/x/tools/cmd/goimports@latest 开发工具下载https://www.jetbrains.com/toolbox-app/笔者用的是 jetbrains 的IDE，所以直接下载 toolbox
设置一下工具目录开始下载
导入导出配置file -&gt; Manage IDE Settings -&gt; Export Settings 在老电脑的 goland 导出设置，新电脑导入（这里可以使用 drop 传输）
goland 插件配置暂且用到这几个
file watchers 也记得配置一下
到这里，已经可以舒服地开始 coding 了，回过头来可以做一下美化什么的。
Extra持续补充吧，后续装了什么好用的值得记录的东西，我也会记一下
terminal p10k安装字体https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf下载后把文件移到“字体册”
修改 iterm2 的字体Profiles -&gt; Text -&gt; Font
安装 p10kgit clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k 编辑 .zshrc
ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;
source ~/.zshrc
根据提示设置即可
最后的效果是这个样子 utools一个工具集合，我主要用到翻译、手册和临时的api调试，还挺方便的
https://www.u.tools/golangci-lintgolang的静态检查。对个人能提升编码质量，对公司能减少bug数，非常推荐
brew install golangci-lint   ]]></content></entry><entry><title>200. 岛屿数量</title><url>/_leetcode/leetcode_number-of-islands/</url><categories><category>leetcode</category></categories><tags><tag>搜索</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/number-of-islands/给你一个由 &lsquo;1&rsquo;（陆地）和 &lsquo;0&rsquo;（水）组成的的二维网格，请你计算网格中岛屿的数量。
岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
此外，你可以假设该网格的四条边均被水包围。
示例 1：
输入：
grid = [ [&#34;1&#34;,&#34;1&#34;,&#34;1&#34;,&#34;1&#34;,&#34;0&#34;], [&#34;1&#34;,&#34;1&#34;,&#34;0&#34;,&#34;1&#34;,&#34;0&#34;], [&#34;1&#34;,&#34;1&#34;,&#34;0&#34;,&#34;0&#34;,&#34;0&#34;], [&#34;0&#34;,&#34;0&#34;,&#34;0&#34;,&#34;0&#34;,&#34;0&#34;] ] 输出：1
示例 2：
输入：
grid = [ [&#34;1&#34;,&#34;1&#34;,&#34;0&#34;,&#34;0&#34;,&#34;0&#34;], [&#34;1&#34;,&#34;1&#34;,&#34;0&#34;,&#34;0&#34;,&#34;0&#34;], [&#34;0&#34;,&#34;0&#34;,&#34;1&#34;,&#34;0&#34;,&#34;0&#34;], [&#34;0&#34;,&#34;0&#34;,&#34;0&#34;,&#34;1&#34;,&#34;1&#34;] ] 输出：3
提示：
m == grid.length n == grid[i].length 1 &lt;= m, n &lt;= 300 grid[i][j] 的值为 &lsquo;0&rsquo; 或 &lsquo;1&rsquo; 代码const ( valid byte = &#39;1&#39; inValid byte = &#39;0&#39; ) func numIslands(grid [][]byte) int { copyGrid := make([][]byte, 0) copyGrid = append(copyGrid, grid...) var count int for i := 0; i &lt; len(copyGrid); i++ { for j := 0; j &lt; len(copyGrid[i]); j++ { if copyGrid[i][j] == valid { mark(copyGrid, i, j) count++ } } } return count } func mark(copyGrid [][]byte, i, j int) { if i &lt; 0 || i &gt;= len(copyGrid) || j &lt; 0 || j &gt;= len(copyGrid[i]) { return } if copyGrid[i][j] == inValid { return } copyGrid[i][j] = inValid mark(copyGrid, i, j+1) mark(copyGrid, i, j-1) mark(copyGrid, i+1, j) mark(copyGrid, i-1, j) }   ]]></content></entry><entry><title>33. 搜索旋转排序数组</title><url>/_leetcode/leetcode_search-in-rotated-sorted-array/</url><categories><category>leetcode</category></categories><tags><tag>双指针</tag><tag>二分查找</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/search-in-rotated-sorted-array/整数数组 nums 按升序排列，数组中的值 互不相同 。
在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], &hellip;, nums[n-1], nums[0], nums[1], &hellip;, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。
给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。
你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。
示例 1：
输入：nums = [4,5,6,7,0,1,2], target = 0 输出：4 示例 2：
输入：nums = [4,5,6,7,0,1,2], target = 3 输出：-1 示例 3：
输入：nums = [1], target = 0 输出：-1 提示：
1 &lt;= nums.length &lt;= 5000 -104 &lt;= nums[i] &lt;= 104 nums 中的每个值都 独一无二 题目数据保证 nums 在预先未知的某个下标上进行了旋转 代码func search(nums []int, target int) int { left, right := 0, len(nums)-1 for left &lt;= right { mid := (left + right) / 2 if nums[mid] == target { return mid } if nums[mid] &gt;= nums[left] { if target &gt;= nums[left] &amp;&amp; target &lt; nums[mid] { right = mid-1 } else { left = mid+1 } } else { if target &gt; nums[mid] &amp;&amp; target &lt;= nums[right] { left = mid+1 } else { right = mid - 1 } } } return -1 }   ]]></content></entry><entry><title>1. 两数之和</title><url>/_leetcode/leetcode_two-sum/</url><categories><category>leetcode</category></categories><tags/><content type="html"><![CDATA[   https://leetcode.cn/problems/two-sum/给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。
示例 1：
输入：nums = [2,7,11,15], target = 9 输出：[0,1] 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。 示例 2：
输入：nums = [3,2,4], target = 6 输出：[1,2] 示例 3：
输入：nums = [3,3], target = 6 输出：[0,1] 提示：
2 &lt;= nums.length &lt;= 104 -109 &lt;= nums[i] &lt;= 109 -109 &lt;= target &lt;= 109 只会存在一个有效答案 进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？
代码func twoSum(nums []int, target int) []int { m := make(map[int]int) for idx, v := range nums { if preIdx, ok := m[v]; ok { return []int{preIdx, idx} } m[target-v] = idx } return nil }   ]]></content></entry><entry><title>102. 二叉树的层序遍历</title><url>/_leetcode/leetcode_binary-tree-level-order-traversal/</url><categories><category>leetcode</category></categories><tags><tag>二叉树</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/binary-tree-level-order-traversal/给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。
示例 1： 输入：root = [3,9,20,null,null,15,7] 输出：[[3],[9,20],[15,7]] 示例 2：
输入：root = [1] 输出：[[1]] 示例 3：
输入：root = [] 输出：[] 提示：
树中节点数目在范围 [0, 2000] 内 -1000 &lt;= Node.val &lt;= 1000 代码type TreeNode struct { Val int Left *TreeNode Right *TreeNode } func levelOrder(root *TreeNode) [][]int { var res [][]int if root == nil { return res } var queue []*TreeNode queue = append(queue, root) var idx int for len(queue) &gt; 0 { res = append(res, []int{}) var layer []*TreeNode for j := 0; j &lt; len(queue); j++ { node := queue[j] res[idx] = append(res[idx], node.Val) if node.Left != nil { layer = append(layer, node.Left) } if node.Right != nil { layer = append(layer, node.Right) } } queue = layer idx++ } return res }   ]]></content></entry><entry><title>21. 合并两个有序链表</title><url>/_leetcode/leetcode_merge-two-sorted-lists/</url><categories><category>leetcode</category></categories><tags><tag>链表</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/merge-two-sorted-lists/将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
示例 1： 输入：l1 = [1,2,4], l2 = [1,3,4] 输出：[1,1,2,3,4,4] 示例 2：
输入：l1 = [], l2 = [] 输出：[] 示例 3：
输入：l1 = [], l2 = [0] 输出：[0] 代码func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode { if list1 == nil { return list2 } if list2 == nil { return list1 } n1, n2 := list1, list2 target := &amp;ListNode{} h := target for n1 != nil || n2 != nil { // n1, n2 其中一个链表用完后，另一个链表直接加入结果 if n1 == nil { target.Next = n2 break } if n2 == nil { target.Next = n1 break } // n1,n2 比较，把小的加入结果，并移动链表 if n1.Val &lt;= n2.Val { target.Next = &amp;ListNode{ Val: n1.Val, } n1 = n1.Next target = target.Next } else { target.Next = &amp;ListNode{ Val: n2.Val, } n2 = n2.Next target = target.Next } } return h.Next }   ]]></content></entry><entry><title>409. 最长回文串</title><url>/_leetcode/leetcode_longest-palindrome/</url><categories><category>leetcode</category></categories><tags><tag>双指针</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/longest-palindrome/给定一个包含大写字母和小写字母的字符串 s ，返回 通过这些字母构造成的 最长的回文串 。
在构造过程中，请注意 区分大小写 。比如 &ldquo;Aa&rdquo; 不能当做一个回文字符串。
示例 1:
输入:s = &#34;abccccdd&#34; 输出:7 解释: 我们可以构造的最长的回文串是&#34;dccaccd&#34;, 它的长度是 7。 示例 2:
输入:s = &#34;a&#34; 输出:1 示例 3：
输入:s = &#34;aaaaaccc&#34; 输出:7 提示:
1 &lt;= s.length &lt;= 2000 s 只由小写 和/或 大写英文字母组成
解题思路双数即可参与构成回文数，因此给各个成员计数，如果是单数，取len-1，双数，取len。 最中间的数可以是单个，因此，如果最终结果小于len(s)，说明有元素为单数，可以+1把多出来的放中间。 代码func longestPalindrome(s string) int { m := make(map[rune]int) for _, c := range s { m[c] += 1 } var sum int for _, v := range m { sum += v / 2 * 2 } if sum &lt; len(s) { sum++ } return sum }   ]]></content></entry><entry><title>912. 排序数组</title><url>/_leetcode/leetcode_sort-an-array/</url><categories><category>leetcode</category></categories><tags><tag>快排</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/sort-an-array/给你一个整数数组 nums，请你将该数组升序排列。
示例 1：
输入：nums = [5,2,3,1] 输出：[1,2,3,5] 示例 2：
输入：nums = [5,1,1,2,0,0] 输出：[0,0,1,1,2,5] 提示：
1 &lt;= nums.length &lt;= 5 * 104 -5 * 104 &lt;= nums[i] &lt;= 5 * 104
解题思路排序题，快排 代码// 快速排序 func quickSort(nums []int) { // 递归终止条件 if len(nums) &lt; 2 { return } // 随机选择基准值 pivotIndex := rand.Intn(len(nums)) pivot := nums[pivotIndex] // 分区 left, right := 0, len(nums)-1 for left &lt;= right { for nums[left] &lt; pivot { left++ } for nums[right] &gt; pivot { right-- } if left &lt;= right { nums[left], nums[right] = nums[right], nums[left] left++ right-- } } // 递归 quickSort(nums[:right+1]) quickSort(nums[left:]) return } 快排太常见了，但是好久没碰，我实际码代码的时候遇到了不少问题，正好整理一下。
快排的核心思想就是把无序的序列根据一个基准值分成2份无序的序列，宏观上，两份序列有序。再对这两份无序的序列做同样的处理。 有一些边界情况需要考虑： 有相同值，这个时候，为了确保相同值之间的值能参与排序，需要跳过相同的值或者交换相同的值； 为了防止死循环，在分成2份序列的时候，不能出现某个序列为空的情况。如 [1,6]，6为基准值，他可能会分成 [1,6] 和 []，然后陷入死循环； left 和 right 每一轮交换后，可能会有3种情况 基准值和另一个可以交换的值。这种情况，基准值会变化位置。这个时候，left 和 right 都可能指向基准值。 right 指向基准值左边的一个值，left 指向基准值 right 指向基准值，left 指向基准值右边的一个值 只有一个基准值。这个时候 left 和 right 在基准值两侧 没有基准值。基准值提前被交换掉了，right 指向一个比基准值小的值，left 指向一个比基准值大的值，且相邻 每轮交换后，left 和 right 终态一定是 left 在 right 右边 根据2、3和4，下一轮的分组应该取 [0:right] 和 [left:len-1]   ]]></content></entry><entry><title>53. 最大子数组和</title><url>/_leetcode/leetcode_maximum-subarray/</url><categories><category>leetcode</category></categories><tags><tag>桶排序</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/maximum-subarray/给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
子数组 是数组中的一个连续部分。
示例 1：
输入：nums = [-2,1,-3,4,-1,2,1,-5,4] 输出：6 解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。 示例 2：
输入：nums = [1] 输出：1 示例 3：
输入：nums = [5,4,-1,7,8] 输出：23 提示：
1 &lt;= nums.length &lt;= 105 -104 &lt;= nums[i] &lt;= 104
进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。
解题思路遍历，前n个数相加，如果小于第n个数，则舍去前n-1个数，这样可以保证 前n个数最大 代码func maxSubArray(nums []int) int { if len(nums) == 0 { return 0 } max := nums[0] sum := nums[0] nums = nums[1:] for _, v := range nums { if sum+v &gt; v { sum += v } else { sum = v } if max &lt; sum { max = sum } } return max }   ]]></content></entry><entry><title>15. 三数之和</title><url>/_leetcode/leetcode_3sum/</url><categories><category>leetcode</category></categories><tags><tag>双指针</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/3sum/给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请
你返回所有和为 0 且不重复的三元组。
注意：答案中不可以包含重复的三元组。
示例 1：
输入：nums = [-1,0,1,2,-1,-4] 输出：[[-1,-1,2],[-1,0,1]] 解释： nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。 nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。 nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。 注意，输出的顺序和三元组的顺序并不重要。 示例 2：
输入：nums = [0,1,1] 输出：[] 解释：唯一可能的三元组和不为 0 。 示例 3：
输入：nums = [0,0,0] 输出：[[0,0,0]] 解释：唯一可能的三元组和为 0 。 提示：
3 &lt;= nums.length &lt;= 3000 -105 &lt;= nums[i] &lt;= 105
解题思路遍历，两两求和，得到一个新的数组，然后再遍历原数组，求得和为0的成员。这样做复杂度比较高，有O(n^2)，而且需要记下标，感觉不太好。 先排序，然后遍历第一个值，第二个和第三个值使用双指针。注意去重。 代码func threeSum(nums []int) [][]int { // 特殊case判断 if len(nums) &lt; 3 { return nil } // 排序 sort.Ints(nums) var res [][]int h := 0 for h &lt; len(nums) &amp;&amp; nums[h] &lt;= 0 { // 跳过重复 if h &gt; 0 &amp;&amp; nums[h] == nums[h-1] { h++ continue } l := h + 1 r := len(nums) - 1 // 双指针 for l &lt; r { if nums[h]+nums[l]+nums[r] == 0 { res = append(res, []int{nums[h], nums[l], nums[r]}) // 去重 for l &lt; r &amp;&amp; nums[l] == nums[l+1] { l++ } for l &lt; r &amp;&amp; nums[r] == nums[r-1] { r-- } l++ r-- } else if nums[h]+nums[l]+nums[r] &lt; 0 { l++ } else { r-- } } h++ } return res }   ]]></content></entry><entry><title>25. K 个一组翻转链表</title><url>/_leetcode/leetcode_reverse-nodes-in-k-group/</url><categories><category>leetcode</category></categories><tags><tag>链表</tag><tag>滑动窗口</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/reverse-nodes-in-k-group/给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。
k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。
你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。
示例 1： 输入：head = [1,2,3,4,5], k = 2 输出：[2,1,4,3,5] 示例 2： 输入：head = [1,2,3,4,5], k = 3 输出：[3,2,1,4,5] 提示： 链表中的节点数目为 n
1 &lt;= k &lt;= n &lt;= 5000
0 &lt;= Node.val &lt;= 1000
进阶：你可以设计一个只用 O(1) 额外内存空间的算法解决此问题吗？
解题思路遍历链表，把它分成 len / k + 1 段，对每段进行翻转处理，最后合并
代码type ListNode struct { Val int Next *ListNode } func reverseKGroup(head *ListNode, k int) *ListNode { var counter int h := head var list []*ListNode // 遍历，每k个分一组 for head != nil { counter++ if counter == k { a := head head = head.Next a.Next = nil list = append(list, reverse(h)) h = head counter = 0 } else { head = head.Next } } // 不满k if counter != 0 { list = append(list, h) } // 防止下标越界 if len(list) == 0 { return nil } // 记录头节点 head = list[0] // 合并各个分组 for i := range list { if i == len(list)-1 { break } for list[i].Next != nil { list[i] = list[i].Next } list[i].Next = list[i+1] } return head } func reverse(head *ListNode) *ListNode { var prev *ListNode curr := head for curr != nil { next := curr.Next curr.Next = prev prev = curr curr = next } return prev } 不为几m内存而折腰，下一题！
  ]]></content></entry><entry><title>215. 数组中的第K个最大元素</title><url>/_leetcode/leetcode_kth-largest-element-in-an-array/</url><categories><category>leetcode</category></categories><tags><tag>桶排序</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/kth-largest-element-in-an-array/给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。
请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。
你必须设计并实现时间复杂度为 O(n) 的算法解决此问题。
示例 1:
输入: [3,2,1,5,6,4], k = 2 输出: 5 示例 2: 输入: [3,2,3,1,2,4,5,5,6], k = 4 输出: 4 提示：
1 &lt;= k &lt;= nums.length &lt;= 10^5
-10^4 &lt;= nums[i] &lt;= 10^4
解题思路先考虑一下隐藏条件： 元素可能会重复 首先想到的，因为 nums 是无序的，因此至少需要遍历一遍，题目要求 O(n) ，则表示需要在遍历的过程中排好序。自然就想到了桶排序。 代码func findKthLargest(nums []int, k int) int { bucket := make([]int, 20001) for _, v := range nums { bucket[v+10000]++ } count := len(bucket) - 1 for { if bucket[count] &gt; 0 { k = k - bucket[count] } if k &lt;= 0 { return count - 10000 } count-- } } 后记看一眼答案，居然是快排 T_T 。个人其实不喜欢用桶排序，因为受下标约束，不够泛用，并且它的思想很别扭，感觉就像使用redis的时候kv反着存。
但是既然已经写了，并且漂亮地通过了，那么快排兄，下次一定！溜~
  ]]></content></entry><entry><title>go 结构体包含接口成员进行反序列化</title><url>/practical/go_struct_contains_interface/</url><categories><category>实战问题</category></categories><tags><tag>golang</tag><tag>json</tag></tags><content type="html"><![CDATA[   工作中遇到一个问题，结构体包含接口类型的成员时，在反序列化的时候会报错。
// Task 接口类型 type Task interface { Exec() error } // TaskA Task接口的实现类A type TaskA struct { A string `json:&amp;#34;a&amp;#34;` } func (ta *TaskA) Exec() error { fmt.Println(&amp;#34;TaskA Exec&amp;#34;) return nil } // TaskB Task接口的实现类B type TaskB struct { B string `json:&amp;#34;b&amp;#34;` } func (tb *TaskB) Exec() error { fmt.Println(&amp;#34;TaskB Exec&amp;#34;) return nil } // MixedStruct 反序列化目标结构体 type MixedStruct struct { Id uint64 `json:&amp;#34;id&amp;#34;` Task Task `json:&amp;#34;task&amp;#34;` } 场景这个结构体在反序列化的过程中会报错。
需要给接口赋值具体的结构体才能正常反序列化。
func TestUnmarshal(t *testing.T) { t.Run(&amp;#34;带 Interface 的结构体反序列化&amp;#34;, func(t *testing.T) { str := &amp;#34;{\&amp;#34;id\&amp;#34;:1,\&amp;#34;task\&amp;#34;:{\&amp;#34;a\&amp;#34;:\&amp;#34;a\&amp;#34;}}&amp;#34; var mixed MixedStruct err := jsoniter.UnmarshalFromString(str, &amp;amp;mixed) assert.NotNil(t, err) t.Log(err) // json_jsoniter.MixedStruct.Task: decode non empty interface: can not unmarshal into nil, error found in #10 byte of …  ]]></content></entry><entry><title>146. LRU 缓存</title><url>/_leetcode/leetcode_lru-cache/</url><categories><category>leetcode</category></categories><tags><tag>链表</tag><tag>缓存</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/lru-cache请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。
实现 LRUCache 类：
LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存 int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。 void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。 函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。 示例：
输入 [&#34;LRUCache&#34;, &#34;put&#34;, &#34;put&#34;, &#34;get&#34;, &#34;put&#34;, &#34;get&#34;, &#34;put&#34;, &#34;get&#34;, &#34;get&#34;, &#34;get&#34;] [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]] 输出 [null, null, null, 1, null, -1, null, -1, 3, 4] 解释 LRUCache lRUCache = new LRUCache(2); lRUCache.put(1, 1); // 缓存是 {1=1} lRUCache.put(2, 2); // 缓存是 {1=1, 2=2} lRUCache.get(1); // 返回 1 lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3} lRUCache.get(2); // 返回 -1 (未找到) lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3} lRUCache.get(1); // 返回 -1 (未找到) lRUCache.get(3); // 返回 3 lRUCache.get(4); // 返回 4 提示：
1 &lt;= capacity &lt;= 3000 0 &lt;= key &lt;= 10000 0 &lt;= value &lt;= 105 最多调用 2 * 105 次 get 和 put
解题思路实现功能主要功能是 Get 和 Put，先分析一下这两个方法需要实现什么功能
Get
获取缓存值 提高key的优先级 Put
key 已存在 设置缓存 设置当前key 的优先级为最高 key 不存在 设置缓存 设置当前key 的优先级为最高 检查缓存容量 数据结构首先是缓存内容，便于存取，使用map 最合适
其次是优先级，他需要需要支持
将某个key的优先级提到最高 删除优先级最低的key 这里就考虑到了 切片、链表
切片：删除key 比较方便。但是定位key来提升优先级需要 O(n) 的复杂度 链表：删除key 需要知道表尾，用双向链表。提升优先级将对应的节点提到表头即可。双向链表完成这两个能力的成本更低。 代码type Node struct { key, val int pre, next *Node } type LRUCache struct { m map[int]*Node // 缓存映射 head, tail *Node // 双向链表，维护优先级，head 指向优先级最高 cap int // 最大容量 size int // 当前缓存数量 } func Constructor(capacity int) LRUCache { l := LRUCache{ m: make(map[int]*Node, capacity), head: &amp;Node{}, tail: &amp;Node{}, cap: capacity, } l.head.next = l.tail l.tail.pre = l.head return l } /* * Get 获取缓存 1. 获取缓存值 2. 提高当前key 的优先级 */ func (this *LRUCache) Get(key int) int { node, ok := this.m[key] if ok { this.moveToHead(node) return node.val } return -1 } /* * Put 设置缓存 两种情况： case1：key 已存在 1. 设置缓存 2. 提高当前key 的优先级 case2: key 不存在 1. 设置缓存 2. 在表头插入key 3. 检查缓存容量 */ func (this *LRUCache) Put(key int, value int) { node, ok := this.m[key] if ok { node.val = value this.moveToHead(node) } else { node = &amp;Node{ key: key, val: value, } this.m[key] = node this.addToHead(node) this.size++ } for this.size &gt; this.cap { tail := this.removeTail() delete(this.m, tail.key) this.size-- } } func (this *LRUCache) addToHead(node *Node) { node.pre = this.head node.next = this.head.next this.head.next.pre = node this.head.next = node } func (this *LRUCache) removeNode(node *Node) { node.pre.next = node.next node.next.pre = node.pre } func (this *LRUCache) moveToHead(node *Node) { this.removeNode(node) this.addToHead(node) } func (this *LRUCache) removeTail() *Node { node := this.tail.pre this.removeNode(node) return node }   ]]></content></entry><entry><title>206. 反转链表</title><url>/_leetcode/leetcode_reverse-linked-list/</url><categories><category>leetcode</category></categories><tags><tag>链表</tag><tag>滑动窗口</tag></tags><content type="html"> https://leetcode.cn/problems/reverse-linked-list
给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。
示例 1：
输入：head = [1,2,3,4,5] 输出：[5,4,3,2,1] 示例 2：
输入：head = [1,2] 输出：[2,1] 示例 3：
输入：head = [] 输出：[] 提示：
链表中节点的数目范围是 [0, 5000] -5000 &amp;lt;= Node.val &amp;lt;= 5000
进阶：链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？
解题思路
方案一
遍历入堆栈，再读一遍 方案二
直接调转指向，用临时节点记录中间值 方案三
递归回溯 这个方案没想到，利用递归从链表尾回溯到链表头，完成翻转 本着做题的目的，我的coding是方案二。其实实际开发中遇到类似的问题，性能内存不是瓶颈的情况下，我会毫不犹豫地选择方案一。可读性高，而且不容易出错。
代码
func reverseList(head *ListNode) *ListNode { if head == nil || head.Next == nil { return head } var target, mid1, mid2 *ListNode mid1, mid2 = head, head.Next for mid2 != nil { mid2 = mid1.Next mid1.Next = target target = mid1 mid1 = mid2 } return target }</content></entry><entry><title>3. 无重复字符的最长子串</title><url>/_leetcode/leetcode_longest-substring-without-repeating-characters/</url><categories><category>leetcode</category></categories><tags><tag>队列</tag><tag>滑动窗口</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/longest-substring-without-repeating-characters/给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。
示例 1:
输入: s = &#34;abcabcbb&#34; 输出: 3 解释: 因为无重复字符的最长子串是 &#34;abc&#34;，所以其长度为 3。 示例 2:
输入: s = &#34;bbbbb&#34; 输出: 1 解释: 因为无重复字符的最长子串是 &#34;b&#34;，所以其长度为 1。 示例 3:
输入: s = &#34;pwwkew&#34; 输出: 3 解释: 因为无重复字符的最长子串是 &#34;wke&#34;，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，&#34;pwke&#34; 是一个子序列，不是子串。 提示：
0 &lt;= s.length &lt;= 5 * 104 s 由英文字母、数字、符号和空格组成 解题思路本题求的是子序列，是连续的，因此可以利用滑动窗口的思想和队列的数据结构。 子序列需要满足不重复的规则，可以遍历字符串，遇到重复的字符丢弃前一个该字符及其以前的部分，每次滑动都记录长度。 代码func lengthOfLongestSubstring(s string) int { var max int m := make(map[rune]struct{}) var queue []rune for _, v := range s { if _, ok := m[v]; ok { for len(queue) &gt; 0 &amp;&amp; queue[0] != v { delete(m, queue[0]) queue = queue[1:] } delete(m, queue[0]) queue = queue[1:] } m[v] = struct{}{} queue = append(queue, v) if len(queue) &gt; max { max = len(queue) } } return max }   ]]></content></entry><entry><title>5. 最长回文子串</title><url>/_leetcode/leetcode_longest_palindrome/</url><categories><category>leetcode</category></categories><tags><tag>队列</tag><tag>滑动窗口</tag></tags><content type="html"><![CDATA[   https://leetcode.cn/problems/longest-palindromic-substring/给你一个字符串 s，找到 s 中最长的回文子串 。
如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。
示例 1：
输入：s = &#34;babad&#34; 输出：&#34;bab&#34; 解释：&#34;aba&#34; 同样是符合题意的答案。 示例 2：
输入：s = &#34;cbbd&#34; 输出：&#34;bb&#34; 提示：
1 &lt;= s.length &lt;= 1000 s 仅由数字和英文字母组成 解题思路动态规划，某一个区间为动态规划的值 dp[i][j] 表示从 i 到 j 是否满足回文子串 代码func longestPalindrome(s string) string { if len(s) &lt;= 1 { return s } // 初始化 dp := make([][]bool, len(s)) for i := range dp { dp[i] = make([]bool, len(s)) // 只有一个值，一定是回文子串 dp[i][i] = true } var maxLen int var res string maxLen = 1 res = string(s[0]) // l 表示子串的长度 for l := 2; l &lt;= len(s); l++ { for i := 0; i &lt; len(s); i++ { j := i+l-1 if j &gt;= len(s) { break } if s[i] == s[j] { if j-1 - (i+1) &lt;= 0 { dp[i][j] = true } else { dp[i][j] = dp[i+1][j-1] } } if dp[i][j] &amp;&amp; j-i+1 &gt; maxLen { maxLen = j-i+1 res = s[i:j+1] } } } return res }   ]]></content></entry><entry><title>MySQL where 范围查询和 order by 关键字无法同时命中索引</title><url>/practical/index_in_orderby/</url><categories><category>实战问题</category></categories><tags><tag>MySQL</tag><tag>索引</tag></tags><content type="html"><![CDATA[   开发中，使用 in 和 order by 的时候，发现无法同时命中索引。
使用 IN 运算符来过滤行时，MySQL 会先使用索引来定位表中的行，并将这些行的所有数据读入内存中。随后，MySQL 会根据查询语句中的 ORDER BY 子句对这些数据进行排序。
简单场景构造CREATE TABLE `c` ( `id` bigint unsigned NOT NULL AUTO_INCREMENT, `a` int NOT NULL DEFAULT &#39;0&#39;, `b` int NOT NULL DEFAULT &#39;0&#39;, `c` int NOT NULL DEFAULT &#39;0&#39;, PRIMARY KEY (`id`), KEY `abc` (`a`,`b`,`c`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci -- data insert into c(a, b, c) values (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 2, 3), (2, 2, 2), (3, 3, 3); Explain SELECT非范围查询explain select * from c where a = 1 and b = 1 order by c; /* +----+-------------+-------+------------+------+---------------+------+---------+-------------+------+----------+-------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+-------+------------+------+---------------+------+---------+-------------+------+----------+-------------+ | 1 | SIMPLE | c | NULL | ref | abc | abc | 8 | const,const | 3 | 100.00 | Using index | +----+-------------+-------+------------+------+---------------+------+---------+-------------+------+----------+-------------+ */ 能够完美命中索引。
范围查询explain select * from c where a = 1 and b &gt; 1 order by c; /* +----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+------------------------------------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+------------------------------------------+ | 1 | SIMPLE | c | NULL | range | abc | abc | 8 | NULL | 4 | 100.00 | Using where; Using index; Using filesort | +----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+------------------------------------------+ */ 范围查询用到了filesort，表示 order by没有命中索引，abc 索引的作用相当于 ab。
索引分析索引结构
a b c 1 1 1 2 3 2 1 2 3 3 2 2 2 3 3 3 select * from c where a = 1 and b = 1 order by c; 在非范围查询的时候，可以发现，经过where语句，c的范围是 1、2、3，b已确定，c 有序，order by 可以命中索引。
select * from c where a = 1 and b &gt; 1 order by c; 在范围查询的时候，经过where语句，c的范围是 1、2、3、1、2、3、3，b无法确定（可能为1或2），c 为无序，order by 无法命中索引。
  ]]></content></entry><entry><title>Gorm 的黑魔法</title><url>/practical/gorm_black_magic/</url><categories><category>实战问题</category></categories><tags><tag>golang</tag><tag>gorm</tag></tags><content type="html"><![CDATA[   小伙看到同事写的Gorm黑魔法，逐渐不淡定了。
开发过程中，看到同事的代码写了这么一段：
db = db.Session(&amp;amp;gorm.Session{Context: db.Statement.Context}).FirstOrCreate(&amp;amp;entity) if db.Error !=nil{ return components.ErrorDbInsert.WrapPrintf(db.Error, &amp;#34;Insert error, entity:%s&amp;#34;, utils.ToJson(entity)) } if db.RowsAffected == 0 { return components.ErrorAlreadyExist } FirstOrCreate我不禁感到疑惑，gorm 的 RowsAffected 在进行查询，如果查到数据，也是有值的，为什么在这里可以用 RowsAffected == 0 来判断数据已存在？
抱着这个疑问，我点开了 FirstOrCreate 的代码：
func (db *DB) FirstOrCreate(dest interface{}, conds ...interface{}) (tx *DB) { queryTx := db.Limit(1).Order(clause.OrderByColumn{ Column: clause.Column{Table: clause.CurrentTable, Name: clause.PrimaryKey}, }) if tx = queryTx.Find(dest, conds...); queryTx.RowsAffected == 0 { ... return tx.Create(dest) } else if len(db.Statement.assigns) &amp;gt; 0 { ... return tx.Model(dest).Updates(assigns) } return db } 我们可以很容易地发现，在 Find 查到数据且 assigns 没有值的情况下，return 的是 db，而其他情况下 return 的是 tx。直觉告诉我，原因大概率在这个上面。
getInstance()Limit、Order、Find等许多函数都调用了同一 …  ]]></content></entry><entry><title>MySQL 索引排序</title><url>/learning/mysql_index_sort/</url><categories><category>技术学习</category></categories><tags><tag>MySQL</tag><tag>索引</tag></tags><content type="html"> 开发过程中发现SQL一直filesort，所以研究一下到低怎么才能使用索引进行排序。
表结构和数据
CREATE TABLE `t1` ( `id` int(11) NOT NULL AUTO_INCREMENT, `a` int(11) DEFAULT NULL, `b` int(11) DEFAULT NULL, `c` int(11) DEFAULT NULL, PRIMARY KEY (`id`), KEY `idx_a_b_c` (`a`,`b`,`c`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; id a b c 1 1 5 3 2 5 3 3 3 4 5 9 4 2 6 1 5 4 3 2 6 5 5 5 7 1 2 1 8 5 5 8 9 5 3 9 10 5 5 1 11 5 7 7 SQL
explain select * from t where a = 5 order by c desc; -- type:ref -- key:idx_a_b_c -- ref:const -- Extra:Using where; Using index; Using filesort explain select * from t where a = 5 order by b desc; -- type:ref -- key:idx_a_b_c -- ref:const -- Extra:Using where; Using index explain select * from t where a = 5 and c = 5 order by b desc; -- type:ref -- key:idx_a_b_c -- ref:const -- Extra:Using where; Using index explain select * from t where a = 5 and b = 5 order by c desc; -- type:ref -- key:idx_a_b_c -- ref:const,const -- Extra:Using where; Using index explain select * from t where a = 5 and b &amp;gt;= 5 order by c desc; -- type:range -- key:idx_a_b_c -- ref:NULL -- Extra:Using where; Using index; Using filesort 索引分析
通过观察联合索引的数据结构，很明显就能发现索引都是有序的，使用索引进行排序就是利用了这个特性。
我们来观察 a = 5 的这一段索引，很容易就能发现，在 a 确定的情况下，b 是有序的，但c 是无序的。a 和 b 命中索引，a 和 c 不命中索引
在 a,b 都确定的情况下，c 是有序的。a,b,c 命中索引
这就是老生常谈的 最佳左前缀原则 也叫 最左前缀匹配原则
因此，要让排序项使用索引进行排序
第一个条件就是：where条件+排序项符合最佳左前缀原则
第二个条件：不能使用条件查询
这个也可以通过观察联合索引得出结论
a = 5 AND b &amp;gt;= 5 显然是无法保证 c 是有序的
结论
要让order by 使用索引排序，需要至少满足以下条件：
where条件+排序项符合最佳左前缀原则 不能使用条件查询</content></entry><entry><title>go 的切片扩容</title><url>/learning/slice_expand/</url><categories><category>技术学习</category></categories><tags><tag>golang</tag></tags><content type="html"><![CDATA[   在uber 的go语言编码规范中有这么一条，2.48s 和0.21s 的差距还是很惊人了，我很好奇，why？
切片在append的时候可能会自动扩容，看一下相关源码。
slicetype slice struct { array unsafe.Pointer len int cap int } func makeslice(et *_type, len, cap int) unsafe.Pointer { // 1. 计算需要申请的容量，并判断是否内存溢出 mem, overflow := math.MulUintptr(et.size, uintptr(cap)) // 2. 内存溢出原因 if overflow || mem &gt; maxAlloc || len &lt; 0 || len &gt; cap { // 计算slice所需内存通过MulUintptr来实现的 mem, overflow := math.MulUintptr(et.size, uintptr(len)) if overflow || mem &gt; maxAlloc || len &lt; 0 { panicmakeslicelen() } panicmakeslicecap() } // 3. 进行内存分配 return mallocgc(mem, et, true) } func growslice(et *_type, old slice, cap int) slice { ... newcap := old.cap doublecap := newcap + newcap if cap &gt; doublecap { newcap = cap } else { // 当原切片长度小于1024时，新切片的容量会直接翻倍。而当原切片的容量大于等于1024时，会反复地增加25%，直到新容量超过所需要的容量 if old.cap &lt; 1024 { newcap = doublecap } else { for 0 &lt; newcap &amp;&amp; newcap &lt; cap { newcap += newcap / 4 } if newcap &lt;= 0 { newcap = cap } } } var overflow bool var lenmem, newlenmem, capmem uintptr switch { case et.size == 1: lenmem = uintptr(old.len) newlenmem = uintptr(cap) capmem = roundupsize(uintptr(newcap)) overflow = uintptr(newcap) &gt; maxAlloc newcap = int(capmem) case et.size == sys.PtrSize: lenmem = uintptr(old.len) * sys.PtrSize newlenmem = uintptr(cap) * sys.PtrSize capmem = roundupsize(uintptr(newcap) * sys.PtrSize) overflow = uintptr(newcap) &gt; maxAlloc/sys.PtrSize newcap = int(capmem / sys.PtrSize) case isPowerOfTwo(et.size): var shift uintptr if sys.PtrSize == 8 { // Mask shift for better code generation. shift = uintptr(sys.Ctz64(uint64(et.size))) &amp; 63 } else { shift = uintptr(sys.Ctz32(uint32(et.size))) &amp; 31 } lenmem = uintptr(old.len) &lt;&lt; shift newlenmem = uintptr(cap) &lt;&lt; shift capmem = roundupsize(uintptr(newcap) &lt;&lt; shift) overflow = uintptr(newcap) &gt; (maxAlloc &gt;&gt; shift) newcap = int(capmem &gt;&gt; shift) default: lenmem = uintptr(old.len) * et.size newlenmem = uintptr(cap) * et.size capmem, overflow = math.MulUintptr(et.size, uintptr(newcap)) capmem = roundupsize(capmem) newcap = int(capmem / et.size) } ... } package runtime // 内存对齐的过程，为了避免造成过多的内存碎片 func roundupsize(size uintptr) uintptr { // size=1600*8=12800&lt;32768 if size &lt; _MaxSmallSize { // 12800&lt;=0 if size &lt;= smallSizeMax-8 { return uintptr(class_to_size[size_to_class8[(size+smallSizeDiv-1)/smallSizeDiv]]) } else { return uintptr(class_to_size[size_to_class128[(size-smallSizeMax+largeSizeDiv-1)/largeSizeDiv]])//size_to_class128[92]= 56 //class_to_size[56]=13568 //13568/8=1696 } } if size+_PageSize &lt; size { return size } return round(size, _PageSize) } const _MaxSmallSize = 32768 const smallSizeDiv = 8 const smallSizeMax = 1024 const largeSizeDiv = 128 总结slice容量的扩容规则：当原slice的cap小于1024时，新slice的cap变为原来的2倍；原slice的cap大于1024时，新slice变为原来的1.25倍，按照这个规则扩充后，还会进行内存对齐操作。
回到开头，为什么确定切片容量的程序效率更高？因为他省去了扩容的步骤。
扩展：内存对齐的目的假设CPU的内存读写单位为4字节
在内存对齐和非对齐情况下，读取变量a都仅需要读取一次。
在内存对齐情况下，如果要读取变量b，则仅需要读取1次，即第二部分（4-7）；而非对齐情况下，则需要读取2次，即第一部分（0-3）取后3个字节，第二部分取前1个字节，然后用或操作拼接成变量b。
因此，内存对齐在某些情况下可以减少内存的读取次数，提高性能，是一种空间换时间的策略。
  ]]></content></entry><entry><title>go test 的内联问题</title><url>/practical/inlining/</url><categories><category>实战问题</category></categories><tags><tag>golang</tag><tag>test</tag></tags><content type="html"><![CDATA[   使用monkey对函数进行打桩单测的时候，发现打桩函数没有生效。
习惯直接使用IDE的可视化的run和debug功能进行跑单测，没有关注到具体执行的命令。
单测代码func TestLogin(t *testing.T) { // 初始化 dao 层 userDao := &amp;daoUser.UserDao{} // 初始化 service 层 entity := &amp;LoginService{} Convey(&#34;GetUserByUsername&#34;, t, func() { Convey(&#34;Should be success&#34;, func() { // 给 GetByUsername 函数打桩，指定返回值 patches := ApplyMethod(reflect.TypeOf(UserDao), &#34;GetByUsername&#34;, func(*daoUser.UserDao, string) (*daoUser.User, error) { return &amp;daoUser.User{ ID: 1, Username: &#34;weirwei&#34;, Password: &#34;123456&#34;, }, nil }) defer patches.Reset() // 测试 Login res, err := entity.Login(&#34;weirwei&#34;, &#34;123456&#34;) // 断言 So(err, ShouldBeNil) So(res, ShouldBeTrue) }) }) } 问题分析查看run和debug的命令
# run /usr/local/go/bin/go test -c -o /private/var/folders/1q/llslx_n95d1brs7hq2drxjjw0000gn/T/___1go_test_gin_study_service_svUser gin-study/service/svUser # debug /usr/local/go/bin/go test -c -o /private/var/folders/1q/llslx_n95d1brs7hq2drxjjw0000gn/T/___go_test_gin_study_service_svUser -gcflags all=-N -l gin-study/service/svUser 很明显就能发现debug比run多了 -gcflags all=-N -l，这个就是==禁用内联==的选项
内联(inlining)：粗暴的来说，就是将函数内容复制到函数调用的地方，==减少了函数调用的开支==，但一定程度上会增加程序的代码量，==占用更多的内存==。
这么看就很明显了，本来打桩后 GetUserByUsername 会直接返回给定的结果，不走 dao 层的实际代码，但是 go 在编译过程中会进行内联优化，将 dao 层的代码直接“复制”过来，绕过了测试桩。而在本段测试代码中并没有对 dao 层进行相关配置及初始化，导致代码在执行时出现错误。
  ]]></content></entry><entry><title>Typora + PicGo + Gitee 解放你对图片的管理</title><url>/tools/typora+picgo+gitee/</url><categories><category>工具探索</category></categories><tags><tag>Markdown</tag><tag>图床</tag></tags><content type="html"> 使用markdown做笔记的时候，使用图片时，需要将图片放在指定文件夹，然后引用。这么做每次添加图片都比较困难，并且不便于多端使用。
使用PicGo作为图床，将图片托管到Gitee，在使用Typora做笔记的时候可以直接无缝上传图片。
计算机环境准备
Typora PicGo nodejs Typora官网: https://typora.io/
PicGo官网: https://picgo.github.io/PicGo-Doc/zh/guide/
nodejs下载地址: http://nodejs.cn/download/
设置 Gitee 作为 PicGo 的默认图床
在 PicGo 安装 gitee 插件
在插件设置搜索gitee，选择其中一个安装(两个都可以，只是配置内容有稍许不同)
在 Gitee 创建图片仓库
注意==仓库必须公开并且使用Readme初始化==
进行图床配置
若在图床设置中未找到 Gitee 图床，重启 PicGo 即可
owner: Gitee 用户名 repo: Gitee 仓库名 path: Gitee 存放图片的文件夹路径 token: Gitee 私人令牌 message: commit 信息 生成私人令牌: 设置-&amp;gt; 私人令牌 -&amp;gt; 生成新令牌
只勾选 projects 即可
提交后复制 token 至 PicGo 即可
可在上传区进行测试
配置 Typora 上传服务
然后开始愉快地 Markdown 吧！</content></entry><entry><title>关于 Hugo NexT 组织</title><url>/about.html</url><categories/><tags/><content type="html"> Hugo NexT 组织是由众多喜爱 NexT 主题及风格的世界各地友人共同组建而成，为的就是让这个主题继续在 Hugo 引擎中也能得到发扬光大，在此也欢迎你的加入！
我们的愿景
延续 NexT 经典的黑白调搭配，保持简单的易用性及强大的功能。
使用反馈
加入 GitHub Discussions
或 Gitter
在线讨论 🍻 GitHub Issues
提交错误报告 🐛 GitHub Feature
表新功能的想法 ✨ 同时国内用户也可加入 QQ 群交流： 604710815</content></entry><entry><title>站点示例</title><url>/flinks.html</url><categories/><tags/><content type="html"> 如想交换本站友情链接，请在评论区留下你的站点信息，格式参考如下：
- name: Hugo-NexT desc: Hugo NexT 官方预览网站。 avatar: https://hugo-next.eu.org/imgs/hugo_next_avatar.png link: https://hugo-next.eu.org</content></entry></search>